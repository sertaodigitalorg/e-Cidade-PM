<?php

namespace App\Entity;

use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;

#[ORM\Entity]
#[ORM\Table(name: "db_usuarios", schema: "configuracoes")]
#[ApiResource(
    operations: [
        new Get(), 
        new GetCollection() 
    ]
)]
class User implements UserInterface
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: "integer")]
    private int $id_usuario;

    #[ORM\Column(type: "string", length: 60)]
    private string $nome;

    #[ORM\Column(type: "string", length: 20, unique: true)]
    private string $login;

    #[ORM\Column(type: "string", length: 40)]
    private string $senha; // Senha já criptografada no banco

    #[ORM\Column(type: "integer", options: ["default" => 1])]
    private int $usuarioativo;

    #[ORM\Column(type: "string", length: 200, nullable: true)]
    private ?string $email;

    #[ORM\Column(type: "integer", options: ["default" => 0])]
    private int $usuext;

    #[ORM\Column(type: "integer", nullable: true)]
    private ?int $administrador;

    #[ORM\Column(type: "date")]
    private \DateTimeInterface $datatoken;

    /**
     * Métodos para UserInterface do Symfony
     */
    public function getRoles(): array
    {
        return $this->administrador ? ['ROLE_ADMIN'] : ['ROLE_USER'];
    }

    public function getPassword(): ?string
    {
        return $this->senha;
    }

    public function getSalt(): ?string
    {
        return null; // Não é necessário com bcrypt/sha1 no banco
    }

    public function getUsername(): string
    {
        return $this->login;
    }

    public function getUserIdentifier(): string
    {
        return $this->login;
    }

    public function eraseCredentials(): void
    {
        // Se necessário, limpar dados sensíveis da entidade
    }
}
